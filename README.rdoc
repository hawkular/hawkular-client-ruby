{<img src="https://travis-ci.org/hawkular/hawkular-client-ruby.svg?branch=master" alt="Build Status" />}[https://travis-ci.org/hawkular/hawkular-client-ruby]
{<img src="https://coveralls.io/repos/github/hawkular/hawkular-client-ruby/badge.svg?branch=master" alt="Coverage Status" />}[https://coveralls.io/github/hawkular/hawkular-client-ruby?branch=master]
{<img src="https://codeclimate.com/github/hawkular/hawkular-client-ruby/badges/gpa.svg" />}[https://codeclimate.com/github/hawkular/hawkular-client-ruby]

= hawkular-client-ruby

A Ruby Hawkular Client.

Documentation[http://www.hawkular.org/hawkular-client-ruby/]

== Changelog

See {CHANGELOG}[link:file.CHANGES.html] for a list of changes and
{API-Breaking-Changes}[link:file.api_breaking_changes.html] for a list of api-breaking changes.

== Overview

Ruby Hawkular Client provides a Ruby API to communicate with the following Hawkular subprojects:
* {Hawkular Alerts}[https://github.com/hawkular/hawkular-alerts]
* {Hawkular Inventory}[https://github.com/hawkular/hawkular-inventory]
* {Hawkular Metrics}[https://github.com/hawkular/hawkular-metrics]
* Invoking operations on {Hawkular Wildfly Agent}[https://github.com/hawkular/hawkular-agent].


== Usage

You must initialize the Hawkular Client with your username, password and tenant.

  require 'hawkular/hawkular_client'
  client = Hawkular::Client.new(
    entrypoint: 'http://localhost:8080',
    credentials: { username: 'jdoe', password: 'password' },
    options: { tenant: 'hawkular' }
  )

Each subproject API is packed on its own class, which you can access trought the client object.

  client.alerts # Alerts API
  client.inventory # Inventory API
  client.metrics # Metrics API
  client.operations # Operations API

Metrics API is also subdivded on: Mixed, Availability, Counters, Gauges and Tenants.

  client.metrics # Mixed API
  client.metrics.avail # Availability
  client.metrics.counters # Counters
  client.metrics.gauges # Gauges
  client.metrics.tenants # Tenants

The Mixed API is capable of handling multiple types of metrics, like the
push_data[Hawkular/Metrics/Client.html#push_data-instance_method] method, which pushes data
for multiple metrics of all supported data.

You can also access subproject API individually, if you would like to use only the metrics API you could do

  require 'hawkular/metrics/metrics_client'
  metrics_client = Hawkular::Metrics::Client.new(
    entrypoint: 'http://localhost:8080/hawkular/metrics',
    credentials: { username: 'jdoe', password: 'password' },
    options: { tenant: 'hawkular' }
  )

=== Examples

Suppose you will monitor the avaiability of two networks to later on determine which one is the best.
Every certain time, you would get the avaiability of each network and push them to Hawkular Metrics.

  # ... Initialize client ...
  is_network01_available = true
  is_network02_available = false
  client.metrics.push_data(availabilities: [
    { id: 'network-01', data: [{ value: is_network01_available ?  'up' : 'down' }] },
    { id: 'network-02', data: [{ value: is_network02_available ?  'up' : 'down' }] }
  ])

At some other point you might want to access that data to analyze it

  # ... Initialize client ...
  # Fetches the 5 last availabilities reported in the last 8 hours.
  network01_avail = client.metrics.avail.get_data('network-01', limit: 5, order: 'DESC')
  network02_avail = client.metrics.avail.get_data('network-02', limit: 5, order: 'DESC')
  # ... Do something with the availabilities ...

Each network01_avail will be an array like:

  [
    { "timestamp" => 1467312571473, "value" => "up" },
    { "timestamp" => 1467312492650, "value" => "up" },
    # ...
  ]

You can get more info on the others params by checking the metrics API get_data[Hawkular/Metrics/Client/Metrics#get_data-instance_method]

=== More info

Check each resource API for a detailed description of what methods are available.
* Alerts[Hawkular/Alerts/AlertsClient.html]
* Inventory[Hawkular/Inventory/InventoryClient.html]
* Metrics:
  * Mixed[Hawkular/Metrics/Client.html]
  * Availability[Hawkular/Metrics/Client/Availability.html]
  * Counters[Hawkular/Metrics/Client/Counters.html]
  * Gauges[Hawkular/Metrics/Client/Gauges.html]
  * Tenants[Hawkular/Metrics/Client/Tenants.html]
* Operations[Hawkular/Operations/OperationsClient.html]

== Contributing to hawkular-client-ruby

* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Run your code through RuboCop (which is default when running +rake+) and fix complaints.
* When you open a pull request, watch out for failures on Travis.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is
  otherwise necessary, that is fine, but please isolate to its own commit so we can cherry-pick around it.

== Running the tests

Integration tests are recorded and played against cassettes recorded with VCR
(http://www.relishapp.com/vcr/vcr/docs)

* Edit the endpoint properties in the file +spec/endpoint.yml+ (user, password and host name) if needed
* From command line run
    rake spec
* To run the tests against a live server, set +VCR_OFF+ to +1+ as in
    VCR_OFF=1 rake spec
* To update the VCR tapes that supports it, set +VCR_UPDATE+ to +1+ as in
    VCR_UPDATE=1 rake spec
* To run the tests for operations against a live server using the WebSockets, set +WEBSOCKET_ON+ to +1+ as in
    WEBSOCKET_ON=1 rake spec

== Logging

If you want to see API requests and responses, use the following environment
variables:

    RESTCLIENT_LOG=stdout HAWKULARCLIENT_LOG_RESPONSE=1 rake spec

== Generate documentation

Client documentation can be generated using http://yardoc.org

    yardoc

